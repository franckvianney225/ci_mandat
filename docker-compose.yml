version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ci_mandat_postgres
    environment:
      POSTGRES_DB: ci_mandat_db
      POSTGRES_USER: ci_mandat_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ci_mandat_password_2024_dev}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - ci_mandat_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ci_mandat_user -d ci_mandat_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Interface d'administration PostgreSQL (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ci_mandat_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@ci-mandat.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123_dev}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ci_mandat_network
    restart: unless-stopped
    depends_on:
      - postgres

  # Backend NestJS (développement)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ci_mandat_backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://ci_mandat_user:${DB_PASSWORD:-ci_mandat_password_2024_dev}@postgres:5432/ci_mandat_db
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-your_super_secret_access_key_32_chars_minimum_dev}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_super_secret_refresh_key_32_chars_minimum_dev}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-64_char_hex_encryption_key_for_aes_256_gcm_encryption_dev}
      DATA_ENCRYPTION_IV: ${DATA_ENCRYPTION_IV:-16_char_hex_initialization_vector_dev}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      BACKEND_URL: ${BACKEND_URL:-http://localhost:3001}
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - ci_mandat_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run start:dev

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  ci_mandat_network:
    driver: bridge